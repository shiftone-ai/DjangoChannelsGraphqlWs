[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-channels-graphql-ws"
version = "v1.0.0rc7"
description = "Django Channels based WebSocket GraphQL server with Graphene-like subscriptions"
authors = [{ name = "Alexander A. Prokhorov", email = "alexander.prokhorov@datadvance.net" }]
requires-python = ">=3.8.0,<4"
license = "MIT"
dependencies = [
    "aiohttp>=3,<4",
    "asgiref>=3,<4",
    "channels>=4,<5",
    "Django>=4,<5",
    "graphene>=3,<4",
    "graphql-core==3.2.3",
    "msgpack>=1,<2",
    "pytest-asyncio>=0.23.8",
]

[project.urls]
Homepage = "https://github.com/datadvance/DjangoChannelsGraphqlWs"
Repository = "https://github.com/datadvance/DjangoChannelsGraphqlWs"

[dependency-groups]
dev = [
    "black",
    "channels[daphne]>=4,<5",
    "channels-redis",
    "coverage",
    "graphene-django",
    "isort[pyproject]",
    "mypy",
    "plumbum",
    "pylint",
    "pylint-django",
    "pylint-quotes",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-django",
    "pytest-pythonpath",
    "pytest-xdist",
    "tox",
]

[tool.hatch.build.targets.sdist]
include = ["channels_graphql_ws/"]

[tool.hatch.build.targets.wheel]
include = ["channels_graphql_ws/"]

[tool.black]
target-version = ['py38', 'py39', 'py310']

[tool.isort]
profile = "black"

[tool.pylint.MASTER]
# Work in parallel.
# Parallel work disabled due to a bug in the pylint-django:
# https://github.com/PyCQA/pylint-django/issues/276
#jobs = "0"
jobs = "1"

# Disable Pylint-quotes until its issue is fixed:
# https://github.com/edaniszewski/pylint-quotes/issues/29.
## load-plugins = "pylint_quotes,pylint_django"
load-plugins = "pylint_django"
# Do not store results of previous runs.
persistent = "no"
# Allow to load C extension modules.
unsafe-load-any-extension = "yes"

[tool.pylint."MESSAGES CONTROL"]
# design: Do not count lines, members, ..., no use.
# similarities: Duplication does not mean bad design by itself.
disable = "design,similarities"
enable = "c-extension-no-member"

[tool.pylint.BASIC]
# It is OK to have 2-letters identifiers, e.g. 'id' or 'ok'. Also allow
# long identifiers, cause there is a strong line length limitation which
# will force engineers to thing twice before giving too long names.
argument-rgx = "[a-z_][a-z0-9_]{1,64}$"
attr-rgx = "[a-z_][a-z0-9_]{1,64}$"
bad-names = "foo,bar,baz,toto,tutu,tata,responce,pathes"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{1,64}|(__.*__))$"
function-rgx = "[a-z_][a-z0-9_]{1,64}$"
good-names = "i,j,k,ex,Run,_"
method-rgx = "[a-z_][a-z0-9_]{1,64}$"
# Docstrings are needed everywhere.
no-docstring-rgx = "^$"
variable-rgx = "[a-z_][a-z0-9_]{1,64}$"

[tool.pylint.FORMAT]
max-line-length = "88"
max-module-lines = "9000" # Right, over nine thousand!

[tool.pylint.STRING_QUOTES]
# C0116: E0015: Unrecognized option found: docstring-quote, string-quote, triple-quote (unrecognized-option)
#docstring-quote = "double"
#string-quote = "double-avoid-escape"
#triple-quote = "double"

[tool.pylint.PYLINT_DJANGO]
# NOTE: When Pytest runs Pylint this setting is overwritten by the
# environment variable `DJANGO_SETTINGS_MODULE` set by `pytest-django`.
# Anyway, the setting is still useful when VS Code runs Pylint directly.
django-settings-module = "example.settings"

[tool.pylint.REFACTORING]
# We have line length 88, no need to check.
max-nested-blocks = "9000"

[tool.pylint.REPORTS]
reports = "no"
score = "no"

[tool.coverage.run]
branch = true
# List of packages to measure coverage in.
source = ["channels_graphql_ws/"]
# Do not include test files in the coverage report.
omit = ["**/test_*.py"]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py38,py39,py310
[testenv]
allowlist_externals = poetry
commands_pre = poetry install -v
commands = poetry run pytest {posargs}
"""

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
# Might be useful to enable logging for debug:
# log_cli = true
# log_cli_level = "DEBUG"
# log_cli_format = "[%(levelname)s] [%(asctime)s,%(msecs)s] [%(thread)d %(threadName)s] - %(message)s"
# log_cli_date_format = "%Y-%m-%dT%H:%M:%S"

# pytest-pythonpath:
# Set up paths to import Python modules from.
pythonpath = ". example"
# pytest-django:
# NOTE: This influence to both Pytest and to `pylint_django`, cause
# in fact, it simply sets `DJANGO_SETTINGS_MODULE` environment variable.
DJANGO_SETTINGS_MODULE = "example.settings"
# Test files to explore.
python_files = "**/test_*.py"
# Default command-line arguments:
#   - Enable coverage measurement and set config file.
#   - Force verbose output: output list of tests by default.
addopts = "--cov --verbose"
